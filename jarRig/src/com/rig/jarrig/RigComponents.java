package com.rig.jarrig;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;
import com.rig.constants.Commands;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.FilesystemContainer;
import com.vaadin.event.FieldEvents.TextChangeEvent;
import com.vaadin.event.FieldEvents.TextChangeListener;
import com.vaadin.event.Transferable;
import com.vaadin.event.dd.DragAndDropEvent;
import com.vaadin.event.dd.DropHandler;
import com.vaadin.event.dd.TargetDetails;
import com.vaadin.event.dd.acceptcriteria.AcceptAll;
import com.vaadin.event.dd.acceptcriteria.AcceptCriterion;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DragAndDropWrapper;
import com.vaadin.ui.Label;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Tree;
import com.vaadin.ui.Tree.TreeDragMode;

public class RigComponents extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private TextField timeToStart;
	@AutoGenerated
	private TextArea InstrText;
	@AutoGenerated
	private Label Test;
	@AutoGenerated
	private TextField siteList;
	@AutoGenerated
	private Button stopAutotest;
	@AutoGenerated
	private Button startTest;
	@AutoGenerated
	private TabSheet Tabs;
	@AutoGenerated
	private Tree filesystem;
	@AutoGenerated
	private Button checkInstalled;
	@AutoGenerated
	private TextArea consoleOutput;
	@AutoGenerated
	private Button connectRig;
	@AutoGenerated
	private Label projectName;
	@AutoGenerated
	private Button dailyinstall;
	@AutoGenerated
	private TextField daily;
	@AutoGenerated
	private ComboBox IPs;
	String user = "root";
	String password = "root";
	int port = 22;
	String line;
	DragAndDropWrapper dndWrapperDaily;
	DragAndDropWrapper dndWrapperSiteList;
	JSch jsch;
	Session session;
	Channel channel;
	String[] splitRpms;
	boolean oib_br;
	boolean oib_brUi;
	boolean oib_brEg;
	boolean oib_ui;
	boolean webruntime;
	boolean netfrontx;
	File buildFolder;
	File configFolder;
	File configFile;
	File resultsFolder;
	File rigFolder;
	InputStream in;
	Timer timerStart;
	Timer timerStop;
	String[] autoTestStart;

	/**
	 * TO DO: Give this project a structure with packages and split this class
	 * into View/Logic subcomponents !!! Create MySQL Database connection to
	 * store commands etc. or use a static enumeration class for commands
	 * Optimize project structure!!
	 */
	public RigComponents() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		jsch = new JSch();
		timerStart = new Timer();
		timerStop = new Timer();
		initInstructionText();
		initDefaultFolders();
		initComboBoxIPs();
		registerWrapper();
		initFileExplorer();
		initTextfieldListener();
		initButtonsListener();

		// TODO add user code here
	}

	private void initComboBoxIPs() {
		FileInputStream fis = null;
		try {
			fis = new FileInputStream(configFile);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		byte[] data = new byte[(int) configFile.length()];
		try {
			fis.read(data);
			fis.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		String ips = null;
		try {
			ips = new String(data, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String[] separateIPs = ips.split("\\r?\\n");
		for (int i = 0; i < separateIPs.length; i++) {
			IPs.addItem(separateIPs[i]);
		}
	}

	private void initInstructionText() {
		InstrText.setValue("1. Add IP to C:\\builds\\config\\config.ini file and save\n"
				+ "2. Put origin daily build you downloaded from Jenkins to C:\\builds folder\n"
				+ "3. Copy sitelist.txt also to C:\\builds\n" + "4. Choose your RIG ip from the list\n"
				+ "5. Drag and drop daily build from Explorer to Daily Build rpms field and sitelist.txt to corresponding Sitelist field\n"
				+ "6. Choose the time to start the autotest and click on Start\n"
				+ "7. The results will be created after you click on Stop button, store location: C:\\results");
		InstrText.setEnabled(false);

	}

	private void initTextfieldListener() {
		daily.addValueChangeListener(new ValueChangeListener() {

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			public void valueChange(ValueChangeEvent event) {
				daily.setDescription(daily.getValue().toString());
			}
		});
		daily.addTextChangeListener(new TextChangeListener() {

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			public void textChange(TextChangeEvent event) {
				daily.setDescription(event.getText());
			}
		});

	}

	private String getCurrentTime() {
		Date dateNow = new Date();
		SimpleDateFormat ft = new SimpleDateFormat("HH:mm");
		return ft.format(dateNow);
	}

	private void initButtonStart() {
		startTest.setEnabled(true);
		startTest.addClickListener(new ClickListener() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			public void buttonClick(ClickEvent event) {
				if (session != null && timeToStart.getValue() != "") {
					startTest.setEnabled(false);
					dailyinstall.setEnabled(false);
					stopAutotest.setEnabled(true);
					pushSiteListTxt();
					deleteCashedFiles();
					System.out.println(getCurrentTime());
					String[] timeSplitCurrent = getCurrentTime().split(":");
					Object selectedItem = timeToStart.getValue();
					// Object selectedItem = "11:05";
					String[] timeSplitSetted = selectedItem.toString().split(":");
					float hourCurrent = Float.parseFloat(timeSplitCurrent[0]);
					float minCurrent = Float.parseFloat(timeSplitCurrent[1]);
					float hourSetted = Float.parseFloat(timeSplitSetted[0]);
					float minSetted = Float.parseFloat(timeSplitSetted[1]);
					final Float countDownTimer = new Float(
							calculateCountdown(hourCurrent, minCurrent, hourSetted, minSetted));
					System.out.println(countDownTimer);
					timerStart.schedule(new TimerTask() {
						@Override
						public void run() {
							if (!session.isConnected()) {
								openSSHConnection();
							}
							installRpms();
							if (!session.isConnected()) {
								openSSHConnection();
							}
							openChannel();
							((ChannelExec) channel).setCommand(Commands.enableAutoTest);
							updateOutputConsole(Commands.enableAutoTest);
						}
					}, countDownTimer.longValue());

				}
			}

			private void installRpms() {
				splitRpms = null;
				splitRpms = Commands.deleteRpms.split(" ");
				if (daily.getValue() != null && session != null) {
					for (int i = 0; i < splitRpms.length; i++) {
						openChannel();
						((ChannelExec) channel).setCommand("rpm --nodeps -e " + splitRpms[i]);
						updateOutputConsole("rpm --nodeps -e " + splitRpms[i]);
					}
				}
				if (daily.getValue() != null && session != null) {
					openSftpChannelPut(daily.getValue(), "/media/user/");
					openChannel();
					String extractAndInstall = "cd /media/user\n tar -zxvf " + getTarFileName(daily.getValue())
							+ "\n rm " + getTarFileName(daily.getValue()) + "\n cd /media/user/"
							+ getTarFileName(daily.getValue()).substring(0,
									getTarFileName(daily.getValue()).length() - 7)
							+ "\n rpm -ivh *.rpm";
					((ChannelExec) channel).setCommand("systemctl stop BRAM.service\n" + extractAndInstall
							+ "\n systemctl start BRAM.service\n cd ..\n rm -r " + getTarFileName(daily.getValue())
									.substring(0, getTarFileName(daily.getValue()).length() - 7));
					updateOutputConsole("systemctl stop BRAM.service\n" + extractAndInstall
							+ "\n systemctl start BRAM.service\n cd ..\n rm -r " + getTarFileName(daily.getValue())
									.substring(0, getTarFileName(daily.getValue()).length() - 7));
				}
			}

			private String getTarFileName(String tarFile) {

				tarFile = tarFile.replace('\\', '/');
				File file = new File(tarFile);
				return file.getName();

			}

			private void pushSiteListTxt() {
				openSftpChannelPut(siteList.getValue(), Commands.configBrowserPath);
			}

			private void deleteCashedFiles() {
				openChannel();
				((ChannelExec) channel).setCommand(Commands.deleteCoredumps + "\n" + Commands.deleteEvalResult + "\n"
						+ Commands.deleteSiteListPos);
				updateOutputConsole(Commands.deleteCoredumps + "\n" + Commands.deleteEvalResult + "\n"
						+ Commands.deleteSiteListPos);
				oib_br = false;
				oib_brUi = false;
				oib_brEg = false;
				oib_ui = false;
				webruntime = false;
				netfrontx = false;
			}

		});
	}

	private float calculateCountdown(float hCurrent, float mCurrent, float hSetted, float mSetted) {
		float minResultDezimal;
		float hourResult;

		float tmpMCurDezimal = mCurrent / 60;
		System.out.println("MinutenCurrent Dezimal: " + tmpMCurDezimal);
		float tmpHCur = hCurrent + tmpMCurDezimal;
		System.out.println("tmpHCur: " + tmpHCur);

		float tmpMSetDezimal = mSetted / 60;
		System.out.println("MinutenSetted Dezimal: " + tmpMSetDezimal);
		float tmpHSet = hSetted + tmpMSetDezimal;
		System.out.println("tmpHSet: " + tmpHSet);

		if (tmpMCurDezimal <= tmpMSetDezimal) {
			minResultDezimal = tmpMSetDezimal - tmpMCurDezimal;
			hourResult = hSetted - hCurrent;
		} else {
			minResultDezimal = 1 - (tmpMCurDezimal - tmpMSetDezimal);
			hourResult = (hSetted - hCurrent) - 1;
		}
		System.out.println("minResultDezimal: " + minResultDezimal);
		System.out.println("hourResult: " + hourResult);
		return (hourResult * 60 * 60 * 1000) + (minResultDezimal * 60 * 60 * 1000);
	}

	private void initButtonsListener() {
		initButtonConnect();
		initButtonDailyInstall();
		initButtonInstalled();
		initButtonStart();
		initButtonStop();
	}

	private void initDefaultFolders() {
		buildFolder = new File("C:\\builds");
		configFolder = new File("C:\\builds\\config");
		configFile = new File("C:\\builds\\config\\config.ini");
		resultsFolder = new File("C:\\results");
		if (!buildFolder.exists()) {
			buildFolder.mkdir();
		}
		if (!configFolder.exists()) {
			configFolder.mkdir();
		}
		if (!configFile.exists()) {
			try {
				configFile.createNewFile();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		if (!resultsFolder.exists()) {
			resultsFolder.mkdir();
		}
	}

	private void initButtonStop() {
		stopAutotest.setEnabled(false);
		stopAutotest.addClickListener(new ClickListener() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			String coredumps = null;
			String[] coredumpList = null;
			String backtraces = "";
			String getTime = null;

			public void buttonClick(ClickEvent event) {
				dailyinstall.setEnabled(true);
				String oib_brTxt = "_backtraces_OIB_br.txt";
				String netfrontxTxt = "_backtraces_netfrontnx.txt";
				String oib_brEgTxt = "_backtraces_oib_brEgThread.txt";
				String oib_uiTxt = "_backtraces_OIB_ui.txt";
				String webruntimeTxt = "_backtraces_nx_sp_webruntime.txt";
				String oib_brUiTxt = "_backtraces_oib_brUiThr.txt";
				if (!session.isConnected()) {
					openSSHConnection();
				}
				rigFolder = new File("C:\\results\\" + IPs.getValue());
				if (!rigFolder.exists()) {
					rigFolder.mkdir();
				}
				openChannel();
				((ChannelExec) channel).setCommand(Commands.listCoredumps);
				coredumps = getInput();
				coredumpList = identifyCoredumps(coredumps);
				for (int i = 0; i < 6; i++) {
					backtraces = backtraces + "\n" + createBracktraces();
				}
				openSSHConnection();
				openChannel();
				((ChannelExec) channel).setCommand(Commands.stopAutoTest + "\n" + backtraces);
				updateOutputConsole(Commands.stopAutoTest + "\n" + backtraces);
				if (!session.isConnected()) {
					openSSHConnection();
				}
				openChannel();
				((ChannelExec) channel).setCommand("date '+%Y%m%d'");
				getTime = getInput();
				oib_brTxt = getTime.replace("\n", "") + oib_brTxt;
				oib_brEgTxt = getTime.replace("\n", "") + oib_brEgTxt;
				oib_brUiTxt = getTime.replace("\n", "") + oib_brUiTxt;
				oib_uiTxt = getTime.replace("\n", "") + oib_uiTxt;
				webruntimeTxt = getTime.replace("\n", "") + webruntimeTxt;
				netfrontxTxt = getTime.replace("\n", "") + netfrontxTxt;

				if (!session.isConnected()) {
					openSSHConnection();
				}
				copyFilesFromServer(oib_brTxt, rigFolder.getPath() + "/", "/var/db/ext/");
				if (!session.isConnected()) {
					openSSHConnection();
				}
				copyFilesFromServer(oib_brEgTxt, rigFolder.getPath() + "/", "/var/db/ext/");
				if (!session.isConnected()) {
					openSSHConnection();
				}
				copyFilesFromServer(oib_brUiTxt, rigFolder.getPath() + "/", "/var/db/ext/");
				if (!session.isConnected()) {
					openSSHConnection();
				}
				copyFilesFromServer(oib_uiTxt, rigFolder.getPath() + "/", "/var/db/ext/");
				if (!session.isConnected()) {
					openSSHConnection();
				}
				copyFilesFromServer(webruntimeTxt, rigFolder.getPath() + "/", "/var/db/ext/");
				if (!session.isConnected()) {
					openSSHConnection();
				}
				copyFilesFromServer(netfrontxTxt, rigFolder.getPath() + "/", "/var/db/ext/");
				tarEvalResultFolder();
				if (!session.isConnected()) {
					openSSHConnection();
				}
				copyFilesFromServer("eval_result.tar", rigFolder.getPath() + "/", Commands.remoteConfigPath);
				openSSHConnection();
				if (coredumpList.length > 0) {
					openChannel();
					((ChannelExec) channel).setCommand("cd /media/user/coredump\n mkdir coredumps\n");
					updateOutputConsole("");
				}
				for (int i = 0; i < coredumpList.length; i++) {
					if (!session.isConnected()) {
						openSSHConnection();
					}

					openChannel();
					((ChannelExec) channel).setCommand(
							"cd /media/user/coredump\n cp " + coredumpList[i] + " coredumps/" + coredumpList[i]);
					updateOutputConsole("");

				}
				if (!session.isConnected()) {
					openSSHConnection();
				}
				openChannel();
				((ChannelExec) channel).setCommand("cd /media/user/coredump\n tar -zcvf coredumps.tar.gz coredumps");
				updateOutputConsole("");

				if (!(coredumpList.length == 1 && coredumpList[0] == "")) {
					if (!session.isConnected()) {
						openSSHConnection();
					}
					copyFilesFromServer("coredumps.tar.gz", rigFolder.getPath() + "/", Commands.remoteCoredumpPath);
				}
				if (!session.isConnected()) {
					openSSHConnection();
				}
				copyFilesFromServer("config_browser.ini", rigFolder.getPath() + "/", Commands.remoteConfigPath);
				if (!session.isConnected()) {
					openSSHConnection();
				}
				copyFilesFromServer("config_ui.ini", rigFolder.getPath() + "/", Commands.remoteConfigPath);
				if (!session.isConnected()) {
					openSSHConnection();
				}
				copyFilesFromServer("sitelist.txt", rigFolder.getPath() + "/", Commands.remoteConfigPath);

				IPs.setEnabled(true);
				startTest.setEnabled(true);

				deleteBacktraceFiles(oib_brTxt, oib_brEgTxt, oib_brUiTxt, oib_uiTxt, webruntimeTxt, netfrontxTxt);
				deleteCoredumpCashed();
				deleteEvalTar();
				startTest.setEnabled(true);
			}

			private void deleteEvalTar() {
				if (!session.isConnected()) {
					openSSHConnection();
				}
				openChannel();
				((ChannelExec) channel).setCommand(Commands.deleteEvalTar);
				updateOutputConsole(Commands.deleteEvalTar);
			}

			private void deleteCoredumpCashed() {
				if (!session.isConnected()) {
					openSSHConnection();
				}
				openChannel();
				((ChannelExec) channel).setCommand("cd /media/user/coredump\n rm -rf coredumps coredumps.tar.gz");
				updateOutputConsole("cd /media/user/coredump\n rm -rf coredumps coredumps.tar.gz");
			}

			private void deleteBacktraceFiles(String oib_brTxt, String oib_brEgTxt, String oib_brUiTxt,
					String oib_uiTxt, String webruntimeTxt, String netfrontxTxt) {
				if (!session.isConnected()) {
					openSSHConnection();
				}
				openChannel();
				((ChannelExec) channel).setCommand("cd /var/db/ext\n rm -f " + oib_brTxt + " " + oib_brEgTxt + " "
						+ oib_brUiTxt + " " + oib_uiTxt + " " + webruntimeTxt + " " + netfrontxTxt);
				updateOutputConsole("cd /var/db/ext\n rm -f " + oib_brTxt + " " + oib_brEgTxt + " " + oib_brUiTxt + " "
						+ oib_uiTxt + " " + webruntimeTxt + " " + netfrontxTxt);
			}

			private String createBracktraces() {
				if (oib_br) {
					oib_br = false;
					return Commands.createOIB_br_backtrace;
				}
				if (oib_brEg) {
					oib_brEg = false;
					return Commands.createBrEgThread_backtrace;
				}
				if (oib_brUi) {
					oib_brUi = false;
					return Commands.createOIB_ui_backtrace;
				}
				if (oib_ui) {
					oib_ui = false;
					return Commands.createOIB_ui_backtrace;
				}
				if (webruntime) {
					webruntime = false;
					return Commands.createNx_sp_webruntim_backtrace;
				}
				if (netfrontx) {
					netfrontx = false;
					return Commands.createNetfrontnx_backtrace;
				}
				return "";
			}

			private void tarEvalResultFolder() {
				session.disconnect();
				if (!session.isConnected()) {
					openSSHConnection();
				}
				openChannel();
				((ChannelExec) channel)
						.setCommand("cd " + Commands.remoteConfigPath + "\n" + " tar -cvf eval_result.tar eval_result");
				updateOutputConsole("cd " + Commands.remoteConfigPath + "\n" + " tar -cvf eval_result.tar eval_result");
			}

			private String[] identifyCoredumps(String coredump) {
				String lines[] = coredump.split("\\r?\\n");
				for (int i = 0; i < lines.length; i++) {
					if (lines[i].startsWith("core-OIB_br")) {
						oib_br = true;
						break;
					}
				}
				for (int i = 0; i < lines.length; i++) {
					if (lines[i].startsWith("core-oib_brUiThr")) {
						oib_brUi = true;
						break;
					}
				}
				for (int i = 0; i < lines.length; i++) {
					if (lines[i].startsWith("core-oib_brEgThread")) {
						oib_brEg = true;
						break;
					}
				}
				for (int i = 0; i < lines.length; i++) {
					if (lines[i].startsWith("core-OIB_ui")) {
						oib_ui = true;
						break;
					}
				}
				for (int i = 0; i < lines.length; i++) {
					if (lines[i].startsWith("core-nx_sp_webruntim")) {
						webruntime = true;
						break;
					}
				}
				for (int i = 0; i < lines.length; i++) {
					if (lines[i].startsWith("core-netfrontnx")) {
						netfrontx = true;
						break;
					}
				}
				return lines;

			}

			private String getInput() {
				String outStream = "";
				try {
					in = channel.getInputStream();
					channel.connect();

					byte[] tmp = new byte[1024];
					while (true) {
						while (in.available() > 0) {
							int i = in.read(tmp, 0, 1024);
							if (i < 0) {
								break;
							}
							outStream = outStream + new String(tmp, 0, i);
							System.out.print(new String(tmp, 0, i));
						}
						if (channel.isClosed()) {
							if (in.available() > 0) {
								continue;
							}
							break;
						}
					}
					consoleOutput.setReadOnly(false);
					consoleOutput.setValue(outStream);
					consoleOutput.setReadOnly(true);
				} catch (Exception e) {
					System.out.println(e);
				}
				return outStream;

			}

			private void copyFilesFromServer(String fileName, String localDir, String remotePath) {

				try {

					ChannelSftp sftpChannel = (ChannelSftp) session.openChannel("sftp");
					sftpChannel.connect();
					sftpChannel.cd(remotePath); // cd to dir that
					// contains file

					byte[] buffer = new byte[1024];
					BufferedInputStream bis = new BufferedInputStream(sftpChannel.get(fileName));
					File newFile = new File(localDir + fileName);
					OutputStream os = new FileOutputStream(newFile); // CRASHES
					// HERE
					BufferedOutputStream bos = new BufferedOutputStream(os);
					int readCount;
					while ((readCount = bis.read(buffer)) > 0) {
						bos.write(buffer, 0, readCount);
					}
					bis.close();
					bos.close();

				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();

				} catch (JSchException e) {
					e.printStackTrace();
				} catch (SftpException e) {
					e.printStackTrace();
				}
			}
		});

	}

	private void initButtonConnect() {
		connectRig.addClickListener(new ClickListener() {

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			public void buttonClick(ClickEvent event) {
				if (IPs.getValue() != null) {
					System.out.println("Current IP selected: " + IPs.getValue());
					openSSHConnection();
					openChannel();
					((ChannelExec) channel).setCommand("echo \"connected\"");
					updateOutputConsole("echo \"connected\"");
				}
			}
		});
	}

	private void initButtonInstalled() {
		checkInstalled.addClickListener(new ClickListener() {

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			public void buttonClick(ClickEvent event) {
				if (session != null) {
					openChannel();
					((ChannelExec) channel).setCommand(Commands.checkInstalledRpms);
					updateOutputConsole(Commands.checkInstalledRpms);
				}
			}
		});
	}

	private void initButtonDailyInstall() {
		splitRpms = null;
		splitRpms = Commands.deleteRpms.split(" ");
		dailyinstall.addClickListener(new ClickListener() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			public void buttonClick(ClickEvent event) {
				if (daily.getValue() != null && session != null) {
					for (int i = 0; i < splitRpms.length; i++) {
						openChannel();
						((ChannelExec) channel).setCommand("rpm --nodeps -e " + splitRpms[i]);
						updateOutputConsole("rpm --nodeps -e " + splitRpms[i]);
					}
				}
				if (daily.getValue() != null && session != null) {
					openSftpChannelPut(daily.getValue(), "/media/user/");
					openChannel();
					String extractAndInstall = "cd /media/user\n tar -zxvf " + getTarFileName(daily.getValue())
							+ "\n rm " + getTarFileName(daily.getValue()) + "\n cd /media/user/"
							+ getTarFileName(daily.getValue()).substring(0,
									getTarFileName(daily.getValue()).length() - 7)
							+ "\n rpm -ivh *.rpm";
					((ChannelExec) channel).setCommand("systemctl stop BRAM.service\n" + extractAndInstall
							+ "\n systemctl start BRAM.service\n cd ..\n rm -r " + getTarFileName(daily.getValue())
									.substring(0, getTarFileName(daily.getValue()).length() - 7));
					updateOutputConsole("systemctl stop BRAM.service\n" + extractAndInstall
							+ "\n systemctl start BRAM.service\n cd ..\n rm -r " + getTarFileName(daily.getValue())
									.substring(0, getTarFileName(daily.getValue()).length() - 7));
				}

			}

			private String getTarFileName(String tarFile) {
				tarFile = tarFile.replace('\\', '/');
				File file = new File(tarFile);
				return file.getName();
			}
		});

	}

	private void openSftpChannelPut(String tarFile, String path) {
		tarFile = tarFile.replace('\\', '/');
		File file = new File(tarFile);

		ChannelSftp sftpChannel = null;
		try {
			sftpChannel = (ChannelSftp) session.openChannel("sftp");
			sftpChannel.connect();

		} catch (JSchException e1) {
			e1.printStackTrace();
		}
		try {
			sftpChannel.cd(path);
			sftpChannel.put(new FileInputStream(file), file.getName());
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SftpException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			sftpChannel.exit();
		}
	}

	private void updateOutputConsole(String operation) {
		try {
			in = channel.getInputStream();
			channel.connect();
			String outStream = "Command executed: " + operation + "\n\n" + "Output: \n";
			byte[] tmp = new byte[1024];
			while (true) {
				while (in.available() > 0) {
					int i = in.read(tmp, 0, 1024);
					if (i < 0) {
						break;
					}
					outStream = outStream + new String(tmp, 0, i);
					System.out.print(new String(tmp, 0, i));
				}
				if (channel.isClosed()) {
					if (in.available() > 0) {
						continue;
					}
					outStream = outStream + "Exit-status: " + channel.getExitStatus();
					break;
				}
			}
			consoleOutput.setReadOnly(false);
			consoleOutput.setValue(outStream);
			consoleOutput.setReadOnly(true);
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	private void initFileExplorer() {
		FilesystemContainer rigDocs = new FilesystemContainer(new File(buildFolder.getPath()), false);
		filesystem.setContainerDataSource(rigDocs);
		filesystem.setImmediate(true);
		filesystem.setSelectable(true);
		filesystem.setDragMode(TreeDragMode.NODE);
	}

	@SuppressWarnings({ "deprecation", "serial" })
	private void registerWrapper() {
		dndWrapperDaily = new DragAndDropWrapper(daily);
		dndWrapperDaily.setDropHandler(new DropHandler() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			public AcceptCriterion getAcceptCriterion() {
				return AcceptAll.get();
			}

			// get item selected in the filesystem list and put it to dropped
			// textfield item
			public void drop(DragAndDropEvent event) {
				Transferable t = event.getTransferable();
				TargetDetails d = event.getTargetDetails();
				Object sourceItemId = t.getData("itemId");

				Collection<String> flavors = t.getDataFlavors();
				List list = new ArrayList(flavors);
				// AbstractSelectTargetDetails details =
				// (AbstractSelectTargetDetails) event.getTargetDetails();
				// Object idOver = details.getItemIdOver();
				// for (String flavor : flavors) {
				// System.out.println("itemIdTest: " + target.getItemIdOver());
				// }
				// daily.setValue(t.getData((String) list.get(3)).toString());
				daily.setValue(sourceItemId.toString());
			}
		});
		dndWrapperDaily.setWidth(daily.getWidth(), UNITS_PIXELS);
		dndWrapperDaily.setCaption("Daily Build rpms");
		mainLayout.addComponent(dndWrapperDaily, "top:120.0px;left:60.0px;");

		dndWrapperSiteList = new DragAndDropWrapper(siteList);
		dndWrapperSiteList.setDropHandler(new DropHandler() {

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			public AcceptCriterion getAcceptCriterion() {
				return AcceptAll.get();
			}

			// get item selected in the filesystem list and put it to dropped
			// textfield item
			public void drop(DragAndDropEvent event) {
				Transferable t = event.getTransferable();
				Object sourceItemId = t.getData("itemId");
				siteList.setValue(sourceItemId.toString());
			}

		});

		dndWrapperSiteList.setWidth(siteList.getWidth(), UNITS_PIXELS);
		dndWrapperSiteList.setCaption("Sitelist.txt");
		mainLayout.addComponent(dndWrapperSiteList, "top:336.0px;left:60.0px;");

	}

	private void openSSHConnection() {
		try {
			session = jsch.getSession(user, IPs.getValue().toString(), port);
			session.setPassword(password);
			session.setConfig("StrictHostKeyChecking", "no");
			session.connect();
			// InputStream in_stream = new
			// ByteArrayInputStream("ls".getBytes(StandardCharsets.UTF_8));
			// channel.setInputStream(null);

			// channel.setOutputStream();
			// ((ChannelExec) channel).setErrStream(System.err);

			// ChannelSftp sftpChannel = (ChannelSftp)
			// session.openChannel("sftp");
			// sftpChannel.connect();
			// System.out.println("SSH Channel created.");

			// InputStream out= null;
			// out= sftpChannel.get(remoteFile);
			// BufferedReader br = new BufferedReader(new
			// InputStreamReader(out));
			// while ((line = br.readLine()) != null)
			// System.out.println(line);
			// br.close();

		} catch (Exception e) {
			System.err.print(e);
		}
	}

	private Channel openChannel() {
		try {
			channel = session.openChannel("exec");
		} catch (JSchException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return channel;
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("1920px");
		mainLayout.setHeight("1000px");

		// top-level component properties
		setWidth("1920px");
		setHeight("1000px");

		// IPs
		IPs = new ComboBox();
		IPs.setCaption("IP");
		IPs.setImmediate(false);
		IPs.setWidth("200px");
		IPs.setHeight("-1px");
		mainLayout.addComponent(IPs, "top:60.0px;left:60.0px;");

		// daily
		daily = new TextField();
		daily.setCaption("Daily Build rpms");
		daily.setImmediate(false);
		daily.setWidth("200px");
		daily.setHeight("-1px");
		mainLayout.addComponent(daily, "top:120.0px;left:60.0px;");

		// dailyinstall
		dailyinstall = new Button();
		dailyinstall.setCaption("install");
		dailyinstall.setImmediate(true);
		dailyinstall.setWidth("-1px");
		dailyinstall.setHeight("-1px");
		mainLayout.addComponent(dailyinstall, "top:120.0px;left:278.0px;");

		// projectName
		projectName = new Label();
		projectName.setImmediate(false);
		projectName.setWidth("-1px");
		projectName.setHeight("-1px");
		projectName.setValue("JarRiG");
		mainLayout.addComponent(projectName, "top:11.0px;left:11.0px;");

		// connectRig
		connectRig = new Button();
		connectRig.setCaption("Connect");
		connectRig.setImmediate(true);
		connectRig.setWidth("-1px");
		connectRig.setHeight("-1px");
		mainLayout.addComponent(connectRig, "top:60.0px;left:278.0px;");

		// consoleOutput
		consoleOutput = new TextArea();
		consoleOutput.setCaption("Console Output");
		consoleOutput.setImmediate(false);
		consoleOutput.setReadOnly(true);
		consoleOutput.setWidth("754px");
		consoleOutput.setHeight("276px");
		consoleOutput.setWordwrap(false);
		mainLayout.addComponent(consoleOutput, "top:422.0px;left:541.0px;");

		// checkInstalled
		checkInstalled = new Button();
		checkInstalled.setCaption("installed Rpms");
		checkInstalled.setImmediate(true);
		checkInstalled.setWidth("-1px");
		checkInstalled.setHeight("-1px");
		mainLayout.addComponent(checkInstalled, "top:180.0px;left:278.0px;");

		// Tabs
		Tabs = buildTabs();
		mainLayout.addComponent(Tabs, "top:29.0px;left:540.0px;");

		// startTest
		startTest = new Button();
		startTest.setCaption("Start");
		startTest.setImmediate(true);
		startTest.setWidth("-1px");
		startTest.setHeight("-1px");
		mainLayout.addComponent(startTest, "top:416.0px;left:280.0px;");

		// stopAutotest
		stopAutotest = new Button();
		stopAutotest.setCaption("Stop");
		stopAutotest.setImmediate(true);
		stopAutotest.setWidth("-1px");
		stopAutotest.setHeight("-1px");
		mainLayout.addComponent(stopAutotest, "top:416.0px;left:366.0px;");

		// siteList
		siteList = new TextField();
		siteList.setCaption("Sitelist");
		siteList.setImmediate(false);
		siteList.setWidth("-1px");
		siteList.setHeight("-1px");
		mainLayout.addComponent(siteList, "top:336.0px;left:60.0px;");

		// Test
		Test = new Label();
		Test.setImmediate(false);
		Test.setWidth("-1px");
		Test.setHeight("-1px");
		Test.setValue("Autotest");
		mainLayout.addComponent(Test, "top:260.0px;left:11.0px;");

		// InstrText
		InstrText = new TextArea();
		InstrText.setCaption("Instruction");
		InstrText.setImmediate(false);
		InstrText.setWidth("393px");
		InstrText.setHeight("281px");
		mainLayout.addComponent(InstrText, "top:480.0px;left:60.0px;");

		// timeToStart
		timeToStart = new TextField();
		timeToStart.setCaption("Time (hh:mm)");
		timeToStart.setImmediate(false);
		timeToStart.setWidth("-1px");
		timeToStart.setHeight("-1px");
		mainLayout.addComponent(timeToStart, "top:416.0px;left:60.0px;");

		return mainLayout;
	}

	@AutoGenerated
	private TabSheet buildTabs() {
		// common part: create layout
		Tabs = new TabSheet();
		Tabs.setImmediate(true);
		Tabs.setWidth("-1px");
		Tabs.setHeight("360px");

		// filesystem
		filesystem = new Tree();
		filesystem.setCaption("Filesystem");
		filesystem.setImmediate(false);
		filesystem.setWidth("-1px");
		filesystem.setHeight("329px");
		Tabs.addTab(filesystem, "Explorer", null);

		return Tabs;
	}

}
