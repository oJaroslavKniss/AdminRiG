package com.rig.jarrig;

import java.io.File;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.FilesystemContainer;
import com.vaadin.event.Transferable;
import com.vaadin.event.dd.DragAndDropEvent;
import com.vaadin.event.dd.DropHandler;
import com.vaadin.event.dd.acceptcriteria.AcceptAll;
import com.vaadin.event.dd.acceptcriteria.AcceptCriterion;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DragAndDropWrapper;
import com.vaadin.ui.Label;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Tree;
import com.vaadin.ui.Tree.TreeDragMode;

public class RigComponents extends CustomComponent {

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    @AutoGenerated
    private AbsoluteLayout mainLayout;
    @AutoGenerated
    private Button startTest;
    @AutoGenerated
    private ComboBox timeToStartTest;
    @AutoGenerated
    private TabSheet Tabs;
    @AutoGenerated
    private TextArea configBrowserIni;
    @AutoGenerated
    private Tree filesystem;
    @AutoGenerated
    private Button checkInstalled;
    @AutoGenerated
    private TextArea consoleOutput;
    @AutoGenerated
    private Button delete;
    @AutoGenerated
    private Button addNew;
    @AutoGenerated
    private Label projectName;
    @AutoGenerated
    private Button custominstall;
    @AutoGenerated
    private Button releaseinstall;
    @AutoGenerated
    private Button dailyinstall;
    @AutoGenerated
    private TextField custom;
    @AutoGenerated
    private TextField release;
    @AutoGenerated
    private TextField daily;
    @AutoGenerated
    private ComboBox IPs;
    String user = "root";
    String password = "root";
    String host1 = "10.96.20.190";
    String host2 = "10.96.20.170";
    String host3 = "10.96.20.73";
    int port = 22;
    String remoteFile = "/media/user/testSSH.txt";
    String line;
    DragAndDropWrapper dndWrapper;
    JSch jsch = new JSch();
    Session session;
    Channel channel;
    String deleteRpms = "rpm --nodeps -e NGI_CI_OIBAdapter_Access NGI_CI_OIB_Access NGI_CI_OIB_Dump_Access NGI_CI_OIB_Configuration_Access NGI_CI_OIB_ChromeUI_Access NGI_CI_WebRuntimeAdapter_Access NGI_CI_WebRuntime_Access NGI_CI_Fonts_Access";
    String installRpms = "cd /media/user/20160217*\n rpm -ivh *.rpm";
    String checkInstalledRpms = "rpm -qa | grep NGI_CI";
    String enableAutoTest = "grep -rl 'AutoTestEnabled=FALSE' /opt/jlr/var/nx_browser_chrome/configs/config_browser.ini | xargs sed -i 's/AutoTestEnabled=FALSE/AutoTestEnabled=TRUE/g'\n systemctl restart BRAM.service";
    InputStream in;
    Timer timer = new Timer();
    String autoTestStart = "16:58";

    /**
     * The constructor should first build the main layout, set the composition
     * root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the visual
     * editor.
     */
    public RigComponents() {
	buildMainLayout();
	setCompositionRoot(mainLayout);
	openSSHConnection();
	registerWrapper();
	initFileExplorer();
	initButtonsListener();
	initTabsheet();
	initTimeAutotest();
	IPs.addItem(host1);
	IPs.addItem(host2);
	IPs.addItem(host3);

	// TODO add user code here
    }

    private String getCurrentTime() {
	Date dateNow = new Date();
	SimpleDateFormat ft = new SimpleDateFormat("HH:mm");
	return ft.format(dateNow);
    }

    private void initTimeAutotest() {
	timeToStartTest.addItem(autoTestStart);

	startTest.addClickListener(new ClickListener() {

	    public void buttonClick(ClickEvent event) {
		System.out.println(getCurrentTime());
		String[] timeSplitCurrent = getCurrentTime().split(":");
		Object selectedItem = timeToStartTest.getValue();
		String[] timeSplitSetted = selectedItem.toString().split(":");
		float hourCurrent = Float.parseFloat(timeSplitCurrent[0]);
		float minCurrent = Float.parseFloat(timeSplitCurrent[1]);
		float hourSetted = Float.parseFloat(timeSplitSetted[0]);
		float minSetted = Float.parseFloat(timeSplitSetted[1]);
		final Float countDownTimer = new Float(
			calculateCountdown(hourCurrent, minCurrent, hourSetted, minSetted));
		System.out.println(countDownTimer);
		timer.schedule(new TimerTask() {
		    @Override
		    public void run() {
			openChannel();
			((ChannelExec) channel).setCommand(enableAutoTest);
			updateOutputConsole(enableAutoTest);
		    }
		}, countDownTimer.longValue());
	    }
	});
    }

    private float calculateCountdown(float hCurrent, float mCurrent, float hSetted, float mSetted) {
	float minResultDezimal;
	float hourResult;

	float tmpMCurDezimal = mCurrent / 60;
	System.out.println("MinutenCurrent Dezimal: " + tmpMCurDezimal);
	float tmpHCur = hCurrent + tmpMCurDezimal;
	System.out.println("tmpHCur: " + tmpHCur);

	float tmpMSetDezimal = mSetted / 60;
	System.out.println("MinutenSetted Dezimal: " + tmpMSetDezimal);
	float tmpHSet = hSetted + tmpMSetDezimal;
	System.out.println("tmpHSet: " + tmpHSet);

	if (tmpMCurDezimal <= tmpMSetDezimal) {
	    minResultDezimal = tmpMSetDezimal - tmpMCurDezimal;
	    hourResult = hSetted - hCurrent;
	} else {
	    minResultDezimal = 1 - (tmpMCurDezimal - tmpMSetDezimal);
	    hourResult = (hSetted - hCurrent) - 1;
	}
	System.out.println("minResultDezimal: " + minResultDezimal);
	System.out.println("hourResult: " + hourResult);
	return (hourResult * 60 * 60 * 1000) + (minResultDezimal * 60 * 60 * 1000);
    }

    private void initTabsheet() {
	configBrowserIni.setValue("Here to place Config_browser.ini");
    }

    private void initButtonsListener() {
	initButtonDailyInstall();
	initButtonDelete();
	initButtonInstalled();
    }

    private void initButtonInstalled() {
	checkInstalled.addClickListener(new ClickListener() {

	    public void buttonClick(ClickEvent event) {
		openChannel();
		((ChannelExec) channel).setCommand(checkInstalledRpms);
		updateOutputConsole(checkInstalledRpms);
	    }
	});
    }

    private void initButtonDelete() {
	delete.addClickListener(new ClickListener() {

	    public void buttonClick(ClickEvent event) {
		openChannel();
		((ChannelExec) channel).setCommand(deleteRpms);
		updateOutputConsole(deleteRpms);
	    }
	});
    }

    private void initButtonDailyInstall() {
	dailyinstall.addClickListener(new ClickListener() {
	    public void buttonClick(ClickEvent event) {
		openChannel();
		((ChannelExec) channel).setCommand(installRpms);
		updateOutputConsole(installRpms);
	    }
	});

    }

    private void updateOutputConsole(String operation) {
	try {
	    in = channel.getInputStream();
	    channel.connect();
	    String outStream = "Command executed: " + operation + "\n\n" + "Output: \n";
	    byte[] tmp = new byte[1024];
	    while (true) {
		while (in.available() > 0) {
		    int i = in.read(tmp, 0, 1024);
		    if (i < 0)
			break;
		    outStream = outStream + new String(tmp, 0, i);
		    System.out.print(new String(tmp, 0, i));
		}
		if (channel.isClosed()) {
		    if (in.available() > 0)
			continue;
		    outStream = outStream + "Exit-status: " + channel.getExitStatus();
		    break;
		}
	    }
	    consoleOutput.setReadOnly(false);
	    consoleOutput.setValue(outStream);
	    consoleOutput.setReadOnly(true);
	} catch (Exception e) {
	    System.out.println(e);
	}
    }

    private void initFileExplorer() {
	FilesystemContainer rigDocs = new FilesystemContainer(new File("C:/Users/jaroslav.kniss/Downloads/"), false);
	filesystem.setContainerDataSource(rigDocs);
	filesystem.setImmediate(true);
	filesystem.setSelectable(true);
	filesystem.setDragMode(TreeDragMode.NODE);
    }

    @SuppressWarnings({ "deprecation", "serial" })
    private void registerWrapper() {
	dndWrapper = new DragAndDropWrapper(daily);
	dndWrapper.setDropHandler(new DropHandler() {

	    public AcceptCriterion getAcceptCriterion() {
		return AcceptAll.get();
	    }

	    // get item selected in the filesystem list and put it to dropped
	    // textfield item
	    public void drop(DragAndDropEvent event) {
		Transferable t = event.getTransferable();
		Object sourceItemId = t.getData("itemId");
		daily.setValue(sourceItemId.toString());
	    }
	});

	dndWrapper.setWidth(daily.getWidth(), UNITS_PIXELS);
	dndWrapper.setCaption("Daily Build rpms");
	mainLayout.addComponent(dndWrapper, "top:120.0px;left:60.0px;");
    }

    private void openSSHConnection() {
	try {
	    session = jsch.getSession(user, host1, port);
	    session.setPassword(password);
	    session.setConfig("StrictHostKeyChecking", "no");
	    session.connect();
	    openChannel();
	    // InputStream in_stream = new
	    // ByteArrayInputStream("ls".getBytes(StandardCharsets.UTF_8));
	    // channel.setInputStream(null);

	    // channel.setOutputStream();
	    // ((ChannelExec) channel).setErrStream(System.err);

	    // ChannelSftp sftpChannel = (ChannelSftp)
	    // session.openChannel("sftp");
	    // sftpChannel.connect();
	    // System.out.println("SSH Channel created.");

	    // InputStream out= null;
	    // out= sftpChannel.get(remoteFile);
	    // BufferedReader br = new BufferedReader(new
	    // InputStreamReader(out));
	    // while ((line = br.readLine()) != null)
	    // System.out.println(line);
	    // br.close();

	} catch (Exception e) {
	    System.err.print(e);
	}
    }

    private void openChannel() {
	try {
	    channel = session.openChannel("exec");
	} catch (JSchException e) {
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	}
    }

    @AutoGenerated
    private AbsoluteLayout buildMainLayout() {
	// common part: create layout
	mainLayout = new AbsoluteLayout();
	mainLayout.setImmediate(false);
	mainLayout.setWidth("1920px");
	mainLayout.setHeight("1000px");

	// top-level component properties
	setWidth("1920px");
	setHeight("1000px");

	// IPs
	IPs = new ComboBox();
	IPs.setCaption("IP");
	IPs.setImmediate(false);
	IPs.setWidth("200px");
	IPs.setHeight("-1px");
	mainLayout.addComponent(IPs, "top:60.0px;left:60.0px;");

	// daily
	daily = new TextField();
	daily.setCaption("Daily Build rpms");
	daily.setImmediate(false);
	daily.setWidth("200px");
	daily.setHeight("-1px");
	mainLayout.addComponent(daily, "top:120.0px;left:60.0px;");

	// release
	release = new TextField();
	release.setCaption("Release rpms");
	release.setImmediate(false);
	release.setWidth("200px");
	release.setHeight("-1px");
	mainLayout.addComponent(release, "top:180.0px;left:60.0px;");

	// custom
	custom = new TextField();
	custom.setCaption("Custom rpms");
	custom.setImmediate(false);
	custom.setWidth("200px");
	custom.setHeight("-1px");
	mainLayout.addComponent(custom, "top:240.0px;left:60.0px;");

	// dailyinstall
	dailyinstall = new Button();
	dailyinstall.setCaption("install");
	dailyinstall.setImmediate(true);
	dailyinstall.setWidth("-1px");
	dailyinstall.setHeight("-1px");
	mainLayout.addComponent(dailyinstall, "top:120.0px;left:279.0px;");

	// releaseinstall
	releaseinstall = new Button();
	releaseinstall.setCaption("install");
	releaseinstall.setImmediate(true);
	releaseinstall.setWidth("-1px");
	releaseinstall.setHeight("-1px");
	mainLayout.addComponent(releaseinstall, "top:180.0px;left:279.0px;");

	// custominstall
	custominstall = new Button();
	custominstall.setCaption("install");
	custominstall.setImmediate(true);
	custominstall.setWidth("-1px");
	custominstall.setHeight("-1px");
	mainLayout.addComponent(custominstall, "top:240.0px;left:279.0px;");

	// projectName
	projectName = new Label();
	projectName.setImmediate(false);
	projectName.setWidth("-1px");
	projectName.setHeight("-1px");
	projectName.setValue("JarRiG");
	mainLayout.addComponent(projectName, "top:11.0px;left:11.0px;");

	// addNew
	addNew = new Button();
	addNew.setCaption("Add");
	addNew.setImmediate(true);
	addNew.setWidth("-1px");
	addNew.setHeight("-1px");
	mainLayout.addComponent(addNew, "top:60.0px;left:278.0px;");

	// delete
	delete = new Button();
	delete.setCaption("uninstall");
	delete.setImmediate(true);
	delete.setWidth("-1px");
	delete.setHeight("158px");
	mainLayout.addComponent(delete, "top:120.0px;left:381.0px;");

	// consoleOutput
	consoleOutput = new TextArea();
	consoleOutput.setCaption("Console Output");
	consoleOutput.setImmediate(false);
	consoleOutput.setReadOnly(true);
	consoleOutput.setWidth("754px");
	consoleOutput.setHeight("338px");
	consoleOutput.setWordwrap(false);
	mainLayout.addComponent(consoleOutput, "top:422.0px;left:520.0px;");

	// checkInstalled
	checkInstalled = new Button();
	checkInstalled.setCaption("installed Rpms");
	checkInstalled.setImmediate(true);
	checkInstalled.setWidth("-1px");
	checkInstalled.setHeight("-1px");
	mainLayout.addComponent(checkInstalled, "top:314.0px;left:278.0px;");

	// Tabs
	Tabs = buildTabs();
	mainLayout.addComponent(Tabs, "top:20.0px;left:520.0px;");

	// timeToStartTest
	timeToStartTest = new ComboBox();
	timeToStartTest.setCaption("Autotest start");
	timeToStartTest.setImmediate(false);
	timeToStartTest.setWidth("-1px");
	timeToStartTest.setHeight("-1px");
	mainLayout.addComponent(timeToStartTest, "top:422.0px;left:60.0px;");

	// startTest
	startTest = new Button();
	startTest.setCaption("Start");
	startTest.setImmediate(true);
	startTest.setWidth("-1px");
	startTest.setHeight("-1px");
	mainLayout.addComponent(startTest, "top:420.0px;left:260.0px;");

	return mainLayout;
    }

    @AutoGenerated
    private TabSheet buildTabs() {
	// common part: create layout
	Tabs = new TabSheet();
	Tabs.setImmediate(true);
	Tabs.setWidth("-1px");
	Tabs.setHeight("360px");

	// filesystem
	filesystem = new Tree();
	filesystem.setCaption("Filesystem");
	filesystem.setImmediate(false);
	filesystem.setWidth("-1px");
	filesystem.setHeight("329px");
	Tabs.addTab(filesystem, "Explorer", null);

	// configBrowserIni
	configBrowserIni = new TextArea();
	configBrowserIni.setImmediate(true);
	configBrowserIni.setWidth("-1px");
	configBrowserIni.setHeight("-1px");
	configBrowserIni.setWordwrap(false);
	Tabs.addTab(configBrowserIni, "config_browser.ini", null);

	return Tabs;
    }

}
