package com.rig.jarrig;

import java.io.File;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.FilesystemContainer;
import com.vaadin.event.Transferable;
import com.vaadin.event.dd.DragAndDropEvent;
import com.vaadin.event.dd.DropHandler;
import com.vaadin.event.dd.acceptcriteria.AcceptAll;
import com.vaadin.event.dd.acceptcriteria.AcceptCriterion;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DragAndDropWrapper;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Tree;
import com.vaadin.ui.Tree.TreeDragMode;

public class RigComponents extends CustomComponent {

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    @AutoGenerated
    private AbsoluteLayout mainLayout;
    @AutoGenerated
    private Tree filesystem;
    @AutoGenerated
    private TextArea textArea;
    @AutoGenerated
    private Button delete;
    @AutoGenerated
    private Button addNew;
    @AutoGenerated
    private Label projectName;
    @AutoGenerated
    private Button custominstall;
    @AutoGenerated
    private Button releaseinstall;
    @AutoGenerated
    private Button dailyinstall;
    @AutoGenerated
    private TextField custom;
    @AutoGenerated
    private TextField release;
    @AutoGenerated
    private TextField daily;
    @AutoGenerated
    private ComboBox IPs;
    String user = "root";
    String password = "root";
    String host1 = "10.96.20.190";
    String host2 = "10.96.20.170";
    String host3 = "10.96.20.73";
    int port = 22;
    String remoteFile = "/media/user/testSSH.txt";
    String line;
    DragAndDropWrapper dndWrapper;

    /**
     * The constructor should first build the main layout, set the composition
     * root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the visual
     * editor.
     */
    public RigComponents() {
	buildMainLayout();
	setCompositionRoot(mainLayout);
	registerWrapper();
	initFileExplorer();
	// openSSHConnection();
	IPs.addItem(host1);
	IPs.addItem(host2);
	Ips.addItem(host3);

	// TODO add user code here
    }

    private void initFileExplorer() {
	FilesystemContainer rigDocs = new FilesystemContainer(new File("C:/Users/jaroslav.kniss/Downloads/"), false);
	filesystem.setContainerDataSource(rigDocs);
	filesystem.setImmediate(true);
	filesystem.setSelectable(true);
	filesystem.setDragMode(TreeDragMode.NODE);
    }

    @SuppressWarnings({ "deprecation", "serial" })
    private void registerWrapper() {
	dndWrapper = new DragAndDropWrapper(daily);
	dndWrapper.setDropHandler(new DropHandler() {

	    public AcceptCriterion getAcceptCriterion() {
		return AcceptAll.get();
	    }

	    // get item selected in the filesystem list and put it to dropped
	    // textfield item
	    public void drop(DragAndDropEvent event) {
		Transferable t = event.getTransferable();
		Object sourceItemId = t.getData("itemId");
		daily.setValue(sourceItemId.toString());
	    }
	});
	dndWrapper
	dndWrapper.setWidth(daily.getWidth(), UNITS_PIXELS);
	dndWrapper.setCaption("Daily Build rpms");
	mainLayout.addComponent(dndWrapper, "top:120.0px;left:60.0px;");
    }

    private void openSSHConnection() {
	try {
	    JSch jsch = new JSch();
	    Session session = jsch.getSession(user, host, port);
	    session.setPassword(password);
	    session.setConfig("StrictHostKeyChecking", "no");
	    System.out.println("Establishing Connection...");
	    session.connect();
	    System.out.println("Connection established.");
	    System.out.println("Crating SSH Channel.");
	    Channel channel = session.openChannel("exec");
	    ((ChannelExec) channel).setCommand("cd /media/user/1.3-33\n rpm -ivh *.rpm");
	    // InputStream in_stream = new
	    // ByteArrayInputStream("ls".getBytes(StandardCharsets.UTF_8));
	    channel.setInputStream(null);
	    channel.setOutputStream(System.out);
	    ((ChannelExec) channel).setErrStream(System.err);
	    channel.connect();
	    // ChannelSftp sftpChannel = (ChannelSftp)
	    // session.openChannel("sftp");
	    // sftpChannel.connect();
	    System.out.println("SSH Channel created.");

	    // InputStream out= null;
	    // out= sftpChannel.get(remoteFile);
	    // BufferedReader br = new BufferedReader(new
	    // InputStreamReader(out));
	    // while ((line = br.readLine()) != null)
	    // System.out.println(line);
	    // br.close();

	} catch (Exception e) {
	    System.err.print(e);
	}
    }

    @AutoGenerated
    private AbsoluteLayout buildMainLayout() {
	// common part: create layout
	mainLayout = new AbsoluteLayout();
	mainLayout.setImmediate(false);
	mainLayout.setWidth("1920px");
	mainLayout.setHeight("1000px");

	// top-level component properties
	setWidth("1920px");
	setHeight("1000px");

	// IPs
	IPs = new ComboBox();
	IPs.setCaption("IP");
	IPs.setImmediate(false);
	IPs.setWidth("200px");
	IPs.setHeight("-1px");
	mainLayout.addComponent(IPs, "top:60.0px;left:60.0px;");

	// daily
	daily = new TextField();
	daily.setCaption("Daily Build rpms");
	daily.setImmediate(false);
	daily.setWidth("200px");
	daily.setHeight("-1px");
	mainLayout.addComponent(daily, "top:120.0px;left:60.0px;");

	// release
	release = new TextField();
	release.setCaption("Release rpms");
	release.setImmediate(false);
	release.setWidth("200px");
	release.setHeight("-1px");
	mainLayout.addComponent(release, "top:180.0px;left:59.0px;");

	// custom
	custom = new TextField();
	custom.setCaption("Custom rpms");
	custom.setImmediate(false);
	custom.setWidth("200px");
	custom.setHeight("-1px");
	mainLayout.addComponent(custom, "top:240.0px;left:59.0px;");

	// dailyinstall
	dailyinstall = new Button();
	dailyinstall.setCaption("install");
	dailyinstall.setImmediate(true);
	dailyinstall.setWidth("-1px");
	dailyinstall.setHeight("-1px");
	mainLayout.addComponent(dailyinstall, "top:120.0px;left:279.0px;");

	// releaseinstall
	releaseinstall = new Button();
	releaseinstall.setCaption("install");
	releaseinstall.setImmediate(true);
	releaseinstall.setWidth("-1px");
	releaseinstall.setHeight("-1px");
	mainLayout.addComponent(releaseinstall, "top:180.0px;left:279.0px;");

	// custominstall
	custominstall = new Button();
	custominstall.setCaption("install");
	custominstall.setImmediate(true);
	custominstall.setWidth("-1px");
	custominstall.setHeight("-1px");
	mainLayout.addComponent(custominstall, "top:240.0px;left:279.0px;");

	// projectName
	projectName = new Label();
	projectName.setImmediate(false);
	projectName.setWidth("-1px");
	projectName.setHeight("-1px");
	projectName.setValue("JarRiG");
	mainLayout.addComponent(projectName, "top:11.0px;left:11.0px;");

	// addNew
	addNew = new Button();
	addNew.setCaption("Add");
	addNew.setImmediate(true);
	addNew.setWidth("-1px");
	addNew.setHeight("-1px");
	mainLayout.addComponent(addNew, "top:60.0px;left:278.0px;");

	// delete
	delete = new Button();
	delete.setCaption("uninstall");
	delete.setImmediate(true);
	delete.setWidth("-1px");
	delete.setHeight("158px");
	mainLayout.addComponent(delete, "top:120.0px;left:381.0px;");

	// textArea
	textArea = new TextArea();
	textArea.setImmediate(false);
	textArea.setWidth("-1px");
	textArea.setHeight("-1px");
	mainLayout.addComponent(textArea, "top:382.0px;left:160.0px;");

	// filesystem
	filesystem = new Tree();
	filesystem.setCaption("Filesystem");
	filesystem.setImmediate(false);
	filesystem.setWidth("-1px");
	filesystem.setHeight("278px");
	mainLayout.addComponent(filesystem, "top:29.0px;left:525.0px;");

	return mainLayout;
    }

}
