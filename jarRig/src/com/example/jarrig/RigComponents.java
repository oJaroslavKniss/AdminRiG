package com.example.jarrig;

import java.nio.charset.StandardCharsets;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;
import java.io.*;

public class RigComponents extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button delete;
	@AutoGenerated
	private Button addNew;
	@AutoGenerated
	private Label projectName;
	@AutoGenerated
	private Button custominstall;
	@AutoGenerated
	private Button releaseinstall;
	@AutoGenerated
	private Button dailyinstall;
	@AutoGenerated
	private TextField custom;
	@AutoGenerated
	private TextField release;
	@AutoGenerated
	private TextField daily;
	@AutoGenerated
	private ComboBox IPs;
	String user = "root";
    String password = "root";
    String host = "10.96.20.190";
    int port=22;
    String remoteFile="/media/user/testSSH.txt";
    String line;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public RigComponents() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		openSSHConnection();
		IPs.addItem(host);
		// TODO add user code here
	}

	private void openSSHConnection() {
	    try
        {
        JSch jsch = new JSch();
        Session session = jsch.getSession(user, host, port);
            session.setPassword(password);
            session.setConfig("StrictHostKeyChecking", "no");
        System.out.println("Establishing Connection...");
        session.connect();
            System.out.println("Connection established.");
        System.out.println("Crating SSH Channel.");
        Channel channel=session.openChannel("exec");
        ((ChannelExec)channel).setCommand("ls");
//        InputStream in_stream = new ByteArrayInputStream("ls".getBytes(StandardCharsets.UTF_8));
        channel.setInputStream(null);
        channel.setOutputStream(System.out);
        ((ChannelExec)channel).setErrStream(System.err);
        channel.connect();
//        ChannelSftp sftpChannel = (ChannelSftp) session.openChannel("sftp");
//        sftpChannel.connect();
        System.out.println("SSH Channel created.");
        
//        InputStream out= null;
//        out= sftpChannel.get(remoteFile);
//        BufferedReader br = new BufferedReader(new InputStreamReader(out));        
//        while ((line = br.readLine()) != null)
//            System.out.println(line);
//        br.close();
	    channel.disconnect();
	    session.disconnect();
        }
    catch(Exception e){System.err.print(e);}		
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("800px");
		mainLayout.setHeight("500px");
		
		// top-level component properties
		setWidth("800px");
		setHeight("500px");
		
		// IPs
		IPs = new ComboBox();
		IPs.setCaption("IP");
		IPs.setImmediate(false);
		IPs.setWidth("200px");
		IPs.setHeight("-1px");
		mainLayout.addComponent(IPs, "top:60.0px;left:60.0px;");
		
		// daily
		daily = new TextField();
		daily.setCaption("Daily Build rpms");
		daily.setImmediate(false);
		daily.setWidth("200px");
		daily.setHeight("-1px");
		mainLayout.addComponent(daily, "top:120.0px;left:60.0px;");
		
		// release
		release = new TextField();
		release.setCaption("Release rpms");
		release.setImmediate(false);
		release.setWidth("200px");
		release.setHeight("-1px");
		mainLayout.addComponent(release, "top:180.0px;left:59.0px;");
		
		// custom
		custom = new TextField();
		custom.setCaption("Custom rpms");
		custom.setImmediate(false);
		custom.setWidth("200px");
		custom.setHeight("-1px");
		mainLayout.addComponent(custom, "top:240.0px;left:59.0px;");
		
		// dailyinstall
		dailyinstall = new Button();
		dailyinstall.setCaption("install");
		dailyinstall.setImmediate(true);
		dailyinstall.setWidth("-1px");
		dailyinstall.setHeight("-1px");
		mainLayout.addComponent(dailyinstall, "top:120.0px;left:279.0px;");
		
		// releaseinstall
		releaseinstall = new Button();
		releaseinstall.setCaption("install");
		releaseinstall.setImmediate(true);
		releaseinstall.setWidth("-1px");
		releaseinstall.setHeight("-1px");
		mainLayout.addComponent(releaseinstall, "top:180.0px;left:279.0px;");
		
		// custominstall
		custominstall = new Button();
		custominstall.setCaption("install");
		custominstall.setImmediate(true);
		custominstall.setWidth("-1px");
		custominstall.setHeight("-1px");
		mainLayout.addComponent(custominstall, "top:240.0px;left:279.0px;");
		
		// projectName
		projectName = new Label();
		projectName.setImmediate(false);
		projectName.setWidth("-1px");
		projectName.setHeight("-1px");
		projectName.setValue("JarRiG");
		mainLayout.addComponent(projectName, "top:11.0px;left:11.0px;");
		
		// addNew
		addNew = new Button();
		addNew.setCaption("Add");
		addNew.setImmediate(true);
		addNew.setWidth("-1px");
		addNew.setHeight("-1px");
		mainLayout.addComponent(addNew, "top:60.0px;left:278.0px;");
		
		// delete
		delete = new Button();
		delete.setCaption("uninstall");
		delete.setImmediate(true);
		delete.setWidth("-1px");
		delete.setHeight("158px");
		mainLayout.addComponent(delete, "top:120.0px;left:381.0px;");
		
		return mainLayout;
	}

}
